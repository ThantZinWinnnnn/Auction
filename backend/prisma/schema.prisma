generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                   String             @id @default(uuid())
  email                String             @unique
  name                 String
  password             String
  profileUrl           String?            @default("") @db.VarChar(1000)
  backgroundUrl        String?            @default("") @db.VarChar(1000)
  role                 Role               @default(USER)
  location             Location[]
  comment              Comment[]
  winLotProducts       WinLotProduct[]    @relation("winLotProductOwner")
  lostLotProducts      LostLotProduct[]   @relation("lostLotProductOwner")
  sellerProducts       Product[]          @relation("ownedProducts")
  currentOwnerProducts Product[]          @relation("currentOwnerOfProducts")
  WatchListProduct     WatchListProduct[] @relation("userWatchListProduct")
}

enum Role {
  ADMIN
  USER
}

model Location {
  id      String  @id @default(uuid())
  street  String
  town    String
  region  String
  country String
  user    User?   @relation(fields: [userId], references: [id])
  userId  String?

  @@index([userId])
}

model Product {
  id                String             @id @default(uuid())
  title             String             @db.VarChar(400)
  image             String             @db.VarChar(1000)
  price             Int
  currentBidPrice   Int?
  owner             String?
  currentOwnerName  String?
  seller            User?              @relation("ownedProducts", fields: [sellerId], references: [id])
  sellerId          String?
  currentOwner      User?              @relation("currentOwnerOfProducts", fields: [currentOwnerId], references: [id])
  currentOwnerId    String?
  createdAt         DateTime           @updatedAt
  updatedAt         DateTime           @updatedAt
  category          Json
  subCategory       Json?
  comment           Comment[]
  winLotProducts    WinLotProduct[]    @relation("winLotProducts")
  lostLotProducts   LostLotProduct[]   @relation("lostLotProducts")
  watchListProducts WatchListProduct[] @relation("watchLisProduct")

  @@index([currentOwnerId])
  @@index([sellerId])
}

model Comment {
  id        String   @id @default(uuid())
  comment   String?
  rating    Float?   @default(0)
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  @@index([userId])
  @@index([productId])
}

model WinLotProduct {
  id        String   @id @default(uuid())
  bidPrice  Int
  product   Product? @relation("winLotProducts", fields: [productId], references: [id])
  productId String?
  owner     User?    @relation("winLotProductOwner", fields: [userId], references: [id])
  userId    String?

  @@index([productId])
  @@index([userId])
}

model LostLotProduct {
  id        String   @id @default(uuid())
  bidPrice  Int
  product   Product? @relation("lostLotProducts", fields: [productId], references: [id])
  productId String?
  owner     User?    @relation("lostLotProductOwner", fields: [ownerId], references: [id])
  ownerId   String?

  @@index([productId])
  @@index([ownerId])
}

model WatchListProduct {
  id        String   @id @default(uuid())
  user      User?    @relation("userWatchListProduct", fields: [userId], references: [id])
  userId    String?
  product   Product? @relation("watchLisProduct", fields: [productId], references: [id])
  productId String?

  @@index([userId])
  @@index([productId])
}
